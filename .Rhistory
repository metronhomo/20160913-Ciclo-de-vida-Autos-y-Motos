return(z)
}
datosMaxdiff<-a
datosMaxdiff<-na.omit(datosMaxdiff)
for(i in 1:length(datosMaxdiff)){
datosMaxdiff[,i]<-factor(datosMaxdiff[,i])
}
#cambio la estructura de esa cosa
nombresItems<-unique(c(levels(datosMaxdiff[,1]),
levels(datosMaxdiff[,3]),
levels(datosMaxdiff[,5]),
levels(datosMaxdiff[,7]),
levels(datosMaxdiff[,9]),
levels(datosMaxdiff[,11]),
levels(datosMaxdiff[,13]),
levels(datosMaxdiff[,15]),
levels(datosMaxdiff[,17])))
bloques<-list()
for(i in 1:9){
bloques[[i]]<-funcionLlenaBloque(bloque=i,nBloques=9,atributos=nombresItems,matriz=datosMaxdiff)
}
z<-do.call('cbind',bloques)
nItems = length(nombresItems)
nBloques = ncol(z) / nItems
nItemsPorBloque = 6
n = nrow(z)
nObservaciones = n * nBloques
datosMaxDiff = matrix(as.numeric(t(z)),ncol = nItems,byrow = TRUE, dimnames = list(1:nObservaciones, nombresItems))
#análisis de conteos
conteos = apply(datosMaxDiff, 2, mean, na.rm = TRUE)
rankings = nItems + 1 - rank(conteos)
global<-cbind(Conteos = conteos, Rankings = rankings)
global
#análisis de conteos individuales
id = rep(1:n,rep(nBloques,n))
conteosIndividuales = aggregate(datosMaxDiff,list(id),mean, na.rm = TRUE)[,-1]
round(conteosIndividuales[1:17,],1)
#calculo la densidad
set.seed(23567) # prefijo la semilla para tener reproducibilidad
conteosIndividualesSinEmpates = conteosIndividuales + matrix(runif(n * nItems)/100000, n) #adding random numbers to break ties
rankings = nItems + 1 - apply(conteosIndividualesSinEmpates,1,rank) #rankings
sucio<-apply(rankings,1,table)
limpio<-list()
for(i in 1:length(sucio)){
completo<-as.character(1:nItems)
miniLimpio<-rep(0,nItems)
llave<-match(completo,names(sucio[[i]]))
miniLimpio<-sucio[[i]][llave]
limpio[[i]]<-miniLimpio
}
limpio<-do.call('cbind',limpio)
rownames(limpio)<-1:nItems
limpio[is.na(limpio)]<-0
proporcionesRankings<-t(limpio/n*100)
round(proporcionesRankings,1)
#vemos la misma distribución pero de forma acumulativa
proporcionesAcumulativasRankings = t(apply(proporcionesRankings,1,cumsum))
round(proporcionesAcumulativasRankings,1)
#calculo los promedios de los rankings como sigue
rankingsPromedio = proporcionesRankings %*% (1:17)/100
cbind(rankingsPromedio, Ranking = rank(rankingsPromedio))
####Modelo Logit Total
#Previo a ejecutar el modelo logit es necesario construir una base con "truco"
#Creamos la variable "Eleccion", es una variable indicadora de la marca seleccionada
#por el respondente
#nRows = 90000 #no. de alternativas por bloque* 2*no. de bloques*no. de personas
nRows=nItemsPorBloque*2*nBloques*n
datosLargos = matrix(0, nRows,nItems + 3)
counter = 0
setCounter = 0
for (rr in 1:nObservaciones){
nAlts = 0
alternatives = NULL
respondent = floor(rr/nBloques) + 1
for (cc in 1:nItems){
v = datosMaxDiff[rr,cc]
if (!is.na(v)){
nAlts = nAlts + 1
alternatives[nAlts] = cc
if (v == 1)
best = cc
if (v == -1)
worst = cc
}
}
setCounter = setCounter + 1
for (a in 1:nAlts){
counter = counter + 1
this_a = alternatives[a]
if (this_a == best)
datosLargos[counter,3] = 1
else if (this_a == worst)
datosLargos[counter + nAlts,3] = 1
datosLargos[counter, 1] = respondent
datosLargos[counter + nAlts,1] = respondent
datosLargos[counter, 2] = setCounter
datosLargos[counter + nAlts, 2] = setCounter + 1
datosLargos[counter,3 + this_a] = 1
datosLargos[counter + nAlts,3 + this_a] = -1
}
setCounter = setCounter + 1
counter = counter + nAlts
}
datosLargos = as.data.frame(datosLargos)
#names(datosLargosDE) = c("ID","Set","Eleccion",nombresItems)
nombres<-paste0('v',1:17)
names(datosLargos)<-c("ID","Set","Eleccion",nombres)
datosLargos[1:20,]
tail(datosLargos)
datosLargos<-datosLargos %>%
filter(ID!=0)
#corro el logit
logitModel = mlogit(Eleccion ~ v2+v3+v4+v5+v6+v7+v8+v9+v10+v11+v12+v13+v14+v15+v16+v17 | 0,
data = datosLargos, alt.levels = paste(1:nItemsPorBloque),
shape = "long")
summary(logitModel)
nombresMaxDiff<-function(x,y,z,p){
# x<-datos
# y<-AtributosporBoque
# z<-nombresItems
# p<-Caracteres antes del atributo
for (i in 1:ncol(x)) {
# i<-11
names(x)[i]<- paste('b',ceiling(i/y),'v',match(str_sub(names(x)[i],p,-1), z),sep = "")
}
return((x))}
library(dplyr)
library(brostatistics)
library(sjmisc)
library(stringr)
library(mlogit)
datos <- gaseosa(xfile = "CICLO DE VIDA DENTRO DEL HOGAR AUTOS_MOTOS 13-09-2016 18-23-09.csv",yfile = "CICLO DE VIDA DENTRO DEL HOGAR AUTOS_MOTOS_DataMap_13-09-2016 18_24_04.xlsx")
#
names(datos)[188] <- "P15_12_1"
#
saveRDS(datos,"datos.rds")
datos <- readRDS(
"datos.rds"
)
###########################Agrego el año de los autos
año<-readRDS("Abiertaaño.rds")
datos<-cbind(datos,año)
###Vamos a botar los casos que tienen Na en edo civil y nos quedamos con 60 para completar la cuota de autos
datos<-datos[!(datos$P15=='Moto' & is.na(datos$A4)),]
datos<-datos[!(datos$P15=='Ambos' & is.na(datos$A4)),]
set.seed(9)
vector<-datos[(datos$P15=='Auto' & is.na(datos$A4)),"ResponseID"][sample(x = 1:86,size = 26,replace = F)]
datos<-datos[!(datos$ResponseID %in% vector),]
# table(datos$P15)
# summary(datos$A4)
##########################################################################################
##########################################################################################
# Modificaciones necesarias
datos$A7<-droplevels(datos$A7)
# Saco variable "total
datos$Total <- factor(1,levels = 1,labels = "Total")
datos$A4<- as.character(datos$A4)
datos[is.na(datos$A4), "A4"]<-"NsNc"
datos$A4<-as.factor(datos$A4)
datos$A6<- as.character(datos$A6)
datos[is.na(datos$A6), "A6"]<-"NsNc"
datos$A6<-as.factor(datos$A6)
#Creo la variable para el Banner
datos$EdocivilHijos <-5
datos[(datos$A4=="Casado(a)"| datos$A4=='Unión libre') & datos$A6=='Sí',"EdocivilHijos"] <-1
datos[(datos$A4=="Casado(a)"| datos$A4=='Unión libre') & datos$A6=='No',"EdocivilHijos"] <-2
datos[(datos$A4=="Soltero(a)"|datos$A4=="Divorciado(a)"| datos$A4=="Viudo(a)") & datos$A6=='Sí',"EdocivilHijos"] <-3
datos[(datos$A4=="Soltero(a)"|datos$A4=="Divorciado(a)"| datos$A4=="Viudo(a)") & datos$A6=='No',"EdocivilHijos"] <-4
datos$EdocivilHijos <- factor(datos$EdocivilHijos,levels = c(1,2,3,4,5),labels = c("Casado con hijos","Casado sin hijos","Soltero con Hijos","Soltero sin HIjos","No contestó"))
###Creo la variable de tiempo casados
datos$TiempoCasados = datos$A5*12 + datos$A5_MESES
cortes<-list(
"4 años o menos"= c(0:48),
"De 5 a 9 años"= c(49:108),
"De 10 a 14 años"= c(109:168),
"De 15 a 19 años"= c(169:228),
"20 años o más"= c(228:600)
)
datos$TiempoJuntos<-NA
for(i in 1:length(cortes)){
misCN<- names(cortes)[i]
misCCn<- cortes[[i]]
datos[datos$TiempoCasados %in% misCCn,"TiempoJuntos"]<-i
}
datos$TiempoJuntos<- factor(datos$TiempoJuntos,levels = c(1,2,3,4,5), labels = names(cortes))
############# Creo la variable de edad de hijos
hijitos<-list(
"A9Primero"=c("A9_Hijo1_A_os","A9_Hijo1_Meses"),
"A9Segundo"=c("A9_Hijo2_A_os","A9_Hijo2_Meses"),
"A9Tercero"=c("A9_Hijo3_A_os","A9_Hijo3_Meses"),
"A9Cuarto"=c("A9_Hijo4_A_os","A9_Hijo4_Meses"),
"A9Quinto"=c("A9_Hijo5_A_os","A9_Hijo5_Meses"),
"A9Sexto"=c("A9_Hijo6_A_os","A9_Hijo6_Meses")
)
for(i in 1:length(hijitos)){
# i <- 1
hijitosSub <- hijitos[[i]]
nhijitosSub <- names(hijitos)[i]
edadhijo<-as.numeric(datos[,hijitosSub[1]])
edadhijo<- edadhijo*12
edadhijo<-rowSums(cbind(edadhijo,as.numeric(datos[,hijitosSub[2]])),na.rm = T)
edadhijo[is.na(datos[,hijitosSub[1]]) & is.na(datos[,hijitosSub[2]])]<-NA
edadhijo<- round(edadhijo,0)
cortes<-list(
"menos de 4 años"= c(0:48),
"entre 5 y 9 años"= c(49:108),
"entre 10 y 14 años"= c(109:168),
"más de 15 años"= c(169:800)
)
datos[,nhijitosSub]<-NA
for(i in 1:length(cortes)){
misCN<- names(cortes)[i]
misCCn<- cortes[[i]]
datos[edadhijo %in% misCCn,nhijitosSub]<-i
}
datos[,nhijitosSub]<- factor(datos[,nhijitosSub], levels = 1:4,labels = names(cortes))
}
hijitosEdad <- c("A9Primero","A9Segundo","A9Tercero","A9Cuarto","A9Quinto","A9Sexto")
###########Limpieza de variables
#exportarAbiertas(xpa = datos,xpb = "P17_B_BANCO",xpc = "Pregunta Bancos.csv" )
P17_b_bancor<-importaAbiertas(misDatos = datos, misVaria ="P17_B_BANCO",micatalog = read.csv("Pregunta Bancos1.csv"))
datos<- cbind(datos, P17_b_bancor)
#exportarAbiertas(xpa = datos,xpb = "P18_D_BANCO",xpc = "Pregunta BancosD.csv" )
P18_d_bancor<-importaAbiertas(misDatos = datos, misVaria ="P18_D_BANCO",micatalog = read.csv("Pregunta BancosDR.csv"))
datos<- cbind(datos, P18_d_bancor)
P19_b_bancor<-importaAbiertas(misDatos = datos, misVaria ="P19_B_AMBOS_BANCO",micatalog = read.csv("Pregunta BancosDR.csv"))
datos<- cbind(datos, P19_b_bancor)
P20_c_bancor<-importaAbiertas(misDatos = datos, misVaria ="P20_C_AMBOS_BANCO",micatalog = read.csv("Pregunta BancosDR.csv"))
datos<- cbind(datos, P20_c_bancor)
P20_e_bancor<-importaAbiertas(misDatos = datos, misVaria ="P19_E_AMBOS_BANCO",micatalog = read.csv("Pregunta BancosDR.csv"))
datos<- cbind(datos, P20_e_bancor)
P13ModeloLimpia<-importaAbiertas(misDatos = datos, misVaria ="P15_3_MODELO",micatalog = read.csv("Ciclo de vida autos_motos_ModeloVF.csv"))
datos<- cbind(datos, P13ModeloLimpia)
P10ModeloLimpia<-importaAbiertas(misDatos = datos, misVaria ="P15_10_MODELO",micatalog = read.csv("Ciclo de vida autos_motos_ModeloVF.csv"))
datos<- cbind(datos, P10ModeloLimpia)
# exportarAbiertas(datos,c("P15_3_MODELO_1","P15_10_MODELO_1"),xpc = "AbiertasModelo1.csv")
# exportarAbiertas(datos,c("P15_4_1","P15_11_1"),xpc = "AbiertasModeloAño.csv")
P13ModeloLimpia1<-importaAbiertas(misDatos = datos, misVaria ="P15_3_MODELO_1",micatalog = read.csv("Ciclo de vida autos_motos_ModeloVF.csv"))
datos<- cbind(datos, P13ModeloLimpia1)
P10ModeloLimpia1<-importaAbiertas(misDatos = datos, misVaria ="P15_10_MODELO_1",micatalog = read.csv("Ciclo de vida autos_motos_ModeloVF.csv"))
datos<- cbind(datos, P10ModeloLimpia1)
# exportarAbiertas(datos,"P15_E_OTRO",xpc = "P15EAbierta.csv")
# exportarAbiertas(datos,"P15_D_ESPOSOESPOSA_OTRO",xpc = "P15DESPOSO.csv")
# exportarAbiertas(datos,"P15_D_PAPAMAMA_OTRO",xpc = "P15DPAPA.csv")
# exportarAbiertas(datos,"P15_D_HIJOHIJA_OTRO",xpc = "P15DHIJO.csv")
# exportarAbiertas(datos,"P15_D_OTROFAMILIAR_OTRO",xpc = "P15DOTRO.csv")
# exportarAbiertas(datos,"P17_B_OTRO",xpc = "P17BAbierta.csv")
# exportarAbiertas(datos,"P17_B1_OTRO",xpc = "P17B1Abierta.csv")
###########################Agrupacion de preguntas
##Uso de transporte
misP <- nombresR(datos,"P15_2")
misP <- matrix(data = misP,nrow = 6,ncol = 5)
listaNombres<-list()
for(i in 1:nrow(misP)){
# i <- 1
yoSoy <- misP[i,1]
yoSoy <- paste("Rr_", yoSoy,sep="")
listaNombres[[i]]<-paste(misP[i,])
names(listaNombres)[[i]]<-yoSoy
}
for(i in 1:length(listaNombres)){
# i<-1
mmm<- names(listaNombres)[i]
mhijitos<- listaNombres[[i]]
datos[,mmm]<-FALSE
for(t in 1:length(mhijitos)){
# t<-2
logico<- datos[,mhijitos[t]]==1
logico[is.na(logico)]<-FALSE
datos[logico,mmm]<-TRUE
}
}
misP <- nombresR(datos,"P15_9_AUTO")
misP <- matrix(data = misP,nrow = 6,ncol = 5)
listaNombres<-list()
for(i in 1:nrow(misP)){
# i <- 1
yoSoy <- misP[i,1]
yoSoy <- paste("Rr_", yoSoy,sep="")
listaNombres[[i]]<-paste(misP[i,])
names(listaNombres)[[i]]<-yoSoy
}
for(i in 1:length(listaNombres)){
# i<-1
mmm<- names(listaNombres)[i]
mhijitos<- listaNombres[[i]]
datos[,mmm]<-FALSE
for(t in 1:length(mhijitos)){
# t<-2
logico<- datos[,mhijitos[t]]==1
logico[is.na(logico)]<-FALSE
datos[logico,mmm]<-TRUE
}
}
misP <- nombresR(datos,"P_15_9_MOTO")
misP <- matrix(data = misP,nrow = 6,ncol = 5)
listaNombres<-list()
for(i in 1:nrow(misP)){
# i <- 1
yoSoy <- misP[i,1]
yoSoy <- paste("Rr_", yoSoy,sep="")
listaNombres[[i]]<-paste(misP[i,])
names(listaNombres)[[i]]<-yoSoy
}
for(i in 1:length(listaNombres)){
# i<-1
mmm<- names(listaNombres)[i]
mhijitos<- listaNombres[[i]]
datos[,mmm]<-FALSE
for(t in 1:length(mhijitos)){
# t<-2
logico<- datos[,mhijitos[t]]==1
logico[is.na(logico)]<-FALSE
datos[logico,mmm]<-TRUE
}
}
##########################################################################################
# Banner
bandera1 <- c("Total","P10","F1Genero","NSE","Edad_Rango","Plaza","EdocivilHijos")
bandera3 <- c("Total","A11")
nombresR(datos,"11")
# names(datos)[1:100]
#
# table(
#   datos$P10
# )
# datos[datos$P10=="Automóvil",]
#
table(datos$EdocivilHijos)
##Cambio los NA por 0
#Funcion que quita NA
qna <- function(var){
b <- as.character(var)
b[which(is.na(b))] <- "0"
b <- factor(b)
return(b)
}
MaxDiff<- datos %>%
filter(datos$P10=="Ambas") %>%
select(contains("AUTO_BLOQUE")) %>%
select(contains("AMBOS"))
names(MaxDiff)
for (k in 1:ncol(MaxDiff)){
MaxDiff[[k]] <- qna(var = MaxDiff[[k]])
}
head(MaxDiff)
###Selecciono el nombre de los atributos
nombresItems<-unique(str_sub(names(MaxDiff),24,-1))
atributos5<-unique(str_sub(names(MaxDiff),24,-1))
##Asigno nuevos nobres a las variables, del tipo BiVk  #donde la i es el numero de bloque y la k el numero de atributo
MaxDiff<- nombresMaxDiff(MaxDiff,6,nombresItems,24)
names(MaxDiff)
#incializo el data frame
b<-MaxDiff
## el 18 es de numero de BLOQUES por dos
nombres<-paste0('v',1:18)
a<-data.frame(as.factor(nombres))
a<-cbind(a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a)
a<-a[0,]
names(a)<-paste0('v',1:18)
a<-a %>%
mutate_each(funs(as.character))
names(a)<-paste0('v',1:18)
#lleno el data frame
names(b)<-str_sub(names(b),3,-1)
for(k in 1:length(b)){
for(i in 1:9){
for(j in 1:6){
if(b[k,(i-1)*6+j]=='Más importante'){
a[k,(i-1)*2+1]<-names(b)[(i-1)*6+j]
}
if(b[k,(i-1)*6+j]=='Menos importante'){
a[k,(i-1)*2+2]<-names(b)[(i-1)*6+j]
}
}
}
}
head(a)
funcionLlenaBloque<-function(bloque=2,nBloques=9,atributos=nombresItems,matriz=Maxdiff){
nAtributos<-length(nombresItems)
z<-matrix(nrow=1,ncol=nAtributos)
z<-as.data.frame(z)
k<-1
for(j in 1:nAtributos){
names(z)[k]<-paste0('b',bloque,'v',j)
k<-k+1
}
z<- z %>%
mutate_each(funs(as.numeric))
matcheo<-match(levels(matriz[,(1+(2*(bloque-1)))]),nombresItems)
for(i in 1:nrow(matriz)){
z[i,matcheo]<-0
matcheoMejor<-match(matriz[i,(1+(2*(bloque-1)))],nombresItems)
z[i,matcheoMejor]<-1
matcheoPeor<-match(matriz[i,(2+(2*(bloque-1)))],nombresItems)
z[i,matcheoPeor]<-(-1)
}
return(z)
}
datosMaxdiff<-a
datosMaxdiff<-na.omit(datosMaxdiff)
for(i in 1:length(datosMaxdiff)){
datosMaxdiff[,i]<-factor(datosMaxdiff[,i])
}
#cambio la estructura de esa cosa
nombresItems<-unique(c(levels(datosMaxdiff[,1]),
levels(datosMaxdiff[,3]),
levels(datosMaxdiff[,5]),
levels(datosMaxdiff[,7]),
levels(datosMaxdiff[,9]),
levels(datosMaxdiff[,11]),
levels(datosMaxdiff[,13]),
levels(datosMaxdiff[,15]),
levels(datosMaxdiff[,17])))
nombresItems
bloques<-list()
for(i in 1:9){
bloques[[i]]<-funcionLlenaBloque(bloque=i,nBloques=9,atributos=nombresItems,matriz=datosMaxdiff)
}
z<-do.call('cbind',bloques)
nItems = length(nombresItems)
nBloques = ncol(z) / nItems
nItemsPorBloque = 6
n = nrow(z)
nObservaciones = n * nBloques
datosMaxDiff = matrix(as.numeric(t(z)),ncol = nItems,byrow = TRUE, dimnames = list(1:nObservaciones, nombresItems))
#análisis de conteos
conteos = apply(datosMaxDiff, 2, mean, na.rm = TRUE)
rankings = nItems + 1 - rank(conteos)
global<-cbind(Conteos = conteos, Rankings = rankings)
global
id = rep(1:n,rep(nBloques,n))
conteosIndividuales = aggregate(datosMaxDiff,list(id),mean, na.rm = TRUE)[,-1]
round(conteosIndividuales[1:17,],1)
#calculo la densidad
set.seed(23567) # prefijo la semilla para tener reproducibilidad
conteosIndividualesSinEmpates = conteosIndividuales + matrix(runif(n * nItems)/100000, n) #adding random numbers to break ties
rankings = nItems + 1 - apply(conteosIndividualesSinEmpates,1,rank) #rankings
sucio<-apply(rankings,1,table)
limpio<-list()
for(i in 1:length(sucio)){
completo<-as.character(1:nItems)
miniLimpio<-rep(0,nItems)
llave<-match(completo,names(sucio[[i]]))
miniLimpio<-sucio[[i]][llave]
limpio[[i]]<-miniLimpio
}
limpio<-do.call('cbind',limpio)
rownames(limpio)<-1:nItems
limpio[is.na(limpio)]<-0
proporcionesRankings<-t(limpio/n*100)
round(proporcionesRankings,1)
#vemos la misma distribución pero de forma acumulativa
proporcionesAcumulativasRankings = t(apply(proporcionesRankings,1,cumsum))
round(proporcionesAcumulativasRankings,1)
#calculo los promedios de los rankings como sigue
rankingsPromedio = proporcionesRankings %*% (1:17)/100
cbind(rankingsPromedio, Ranking = rank(rankingsPromedio))
####Modelo Logit Total
#Previo a ejecutar el modelo logit es necesario construir una base con "truco"
#Creamos la variable "Eleccion", es una variable indicadora de la marca seleccionada
#por el respondente
#nRows = 90000 #no. de alternativas por bloque* 2*no. de bloques*no. de personas
nRows=nItemsPorBloque*2*nBloques*n
datosLargos = matrix(0, nRows,nItems + 3)
counter = 0
setCounter = 0
for (rr in 1:nObservaciones){
nAlts = 0
alternatives = NULL
respondent = floor(rr/nBloques) + 1
for (cc in 1:nItems){
v = datosMaxDiff[rr,cc]
if (!is.na(v)){
nAlts = nAlts + 1
alternatives[nAlts] = cc
if (v == 1)
best = cc
if (v == -1)
worst = cc
}
}
setCounter = setCounter + 1
for (a in 1:nAlts){
counter = counter + 1
this_a = alternatives[a]
if (this_a == best)
datosLargos[counter,3] = 1
else if (this_a == worst)
datosLargos[counter + nAlts,3] = 1
datosLargos[counter, 1] = respondent
datosLargos[counter + nAlts,1] = respondent
datosLargos[counter, 2] = setCounter
datosLargos[counter + nAlts, 2] = setCounter + 1
datosLargos[counter,3 + this_a] = 1
datosLargos[counter + nAlts,3 + this_a] = -1
}
setCounter = setCounter + 1
counter = counter + nAlts
}
datosLargos = as.data.frame(datosLargos)
#names(datosLargosDE) = c("ID","Set","Eleccion",nombresItems)
nombres<-paste0('v',1:17)
names(datosLargos)<-c("ID","Set","Eleccion",nombres)
datosLargos[1:20,]
tail(datosLargos)
datosLargos<-datosLargos %>%
filter(ID!=0)
logitModel = mlogit(Eleccion ~ v2+v3+v4+v5+v6+v7+v8+v9+v10+v11+v12+v13+v14+v15+v16+v17 | 0,
data = datosLargos, alt.levels = paste(1:nItemsPorBloque),
shape = "long")
summary(logitModel)
